Given an integer x, return true if x is a palindrome and false otherwise.

Link : https://leetcode.com/problems/palindrome-number/description/

Mycode:

class Solution:
    def isPalindrome(self, x: int) -> bool:
        n=0
        num=x
        # if x<0:
        #     return False
        while num>0:
            tmp=num%10
            n=n*10+tmp
            num=num//10
        # print(n)
        # print(x)
        if n==x:
            return True
        else:
            return False







2nd question:
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

Link: https://leetcode.com/problems/add-two-numbers/

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        temp1=l1
        temp2=l2
        sol=ListNode()
        arr=[]
        s1=''
        s2=''
        su=0
        while temp1.next :
            s1=str(temp1.val)+s1
            temp1=temp1.next
        while temp2.next:
            s2=str(temp2.val)+s2
            temp2=temp2.next
        su = int(s1)+int(s2)
        while su>0:
            tmp = su%10
            sol.val=tmp
            su=su//10
        





